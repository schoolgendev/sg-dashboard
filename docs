----------------------- GIT & GITHUB ----------------------------

- Git: an application running on your computer.
 Send commands to Git using your editor or the command line.
 You can do things like make a new repository, commit some code, etc.
- GitHub: a server that stores user's Git repositories.
- Really good resource:
 https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud
 (Atlassian makes BitBucket, a competitor to GitHub. The functionality is
  basically the same however.)

Getting started:
- Use 'git init' to start a project from scratch.
- Use 'git clone <https://remote-repository-URL>' to create a working
 copy of a project, being stored on a remote repository.

Both of these options will create a folder named .git in your repository.
This is where all the repository information exists.

At any time:
- Use 'git status' to see the status of your repository.
- This will typically show you:
    - what branch you are on
    - how your branch compares to a remote branch (e.g. the one you cloned from)
    - Whether or not you have changes in the repository and
    - Whether or not those changes have been staged

Staging and Committing:
- After making changes to a file in the repository, you can save the changes
 (e.g. click 'Save' or Ctrl+S in an editor)
- These changes are not yet added to the repository.
- To prepare changes you wish to make, you must STAGE them.

        STAGING PHASE
- Stage a file by using 'git add <file-name-here>'.
- To stage a change means to include that change in the next commit that you make.
 A modified file that has NOT been staged will not be included in the next commit.
 This way you can selectively commit files that are ready to be committed.
- To discard changes that are not yet staged for a specific file,
 use 'git checkout -- <file-name>'
- To discard changes that are not yet staged for the entire repo,
 use 'git checkout -- . '
 The filename '.' refers to the current directory - basically you are calling
 git checkout -- on the project (if you are on the root directory for the project).
- To unstage a staged commit, use git reset HEAD <file-name-here>.

        COMMIT PHASE
- To commmit your changes, use 'git commit -m "insert commit message here" '
- Commits are ATOMIC - if at some point along the way the commit fails,
 the entire commit is rolled back.
- Make small commits often (rather than a big commit infrequently).
 This is because it is easier to rollback smaller changes than it is large ones.
- Commit messages are supposed to be informative (but its entirely up to you what
 goes into the commit message).


-------------- SOLAR DASHBOARD ----------------

PAGECONTROLLER.JS

TOP SLIDER
- sgComp is an object that holds the comparator objects
- sgComp.e = energy measured objects
- sgComp.w = weight measured objects

Comparators are in the format:

{
	obj: "batt-phone",
    val: 0.01,
    bg: "url('img/phone-wg-bg.png')",
    color: "#333333",
    lText: {
        smallprint: ""
    },
    rText: {
        up: "Could recharge",
        span: "",
        down: "smartphones!"
    },
    tooltip: "One smartphone takes 10 Watt-hours to fully charge."
    }
}

The fields are:
- obj: a name for the object. No spaces.
- val: how much kWh this object requires. Append "MULTIPLY-" at the
front of the name for multiplicative operations (e.g. km driven by a
train requires multiplying total kWh, compared to phone batteries
charged, which requires dividing the total kWh)
- bg: the background for the slider.
 Backgrounds have dimensions of 360px x 160px.
 Specify the background using a string "url('img/your-img-here.png')"
- color: the color for the text that appears in that slide.
- lText.margin: holds the top and left margins.
 Specify in terms of pixels.
 Specify "null" for the default margin.
- rText.margin: holds the top and right margins.
- rText.up: holds the text above the number
- rText.span: holds the text after the number
- rText.down: holds the text below the number
 Use "" to not specify any of these texts.
- tooltip: holds the text that appears on hovering over the slider.



INDEX.HTML

- Background for page
In the style tag, under the body selector, you can change the background
image and the background color.
 The color is displayed if the background doesn't load.
 The background itself is being taken from the schoolgen website.
 You can replace the background attribute with 'background-color: <color-hexcode-here>'

- Background for sliders
The background for the first slider is set in the script file.
  Change an object's bg property in the script file to change the background.
The background for the second and third sliders are set in the style tag as well.
    .solar-leader-hour {
        background-image: url('<url-image-here>');
    }

- Text in sliders
The text in the first slider is set in the script file. Change the object's rText properties
 to change the text for the first slider.
The text in the second and third sliders is set in the HTML file however.
 These texts are under their associated <li> sections.



REPLACING IMAGES
- To replace an image being used for a slider, you need to know the image
that it is currently using. You find this using the Inspect Element
button.
- Replace an image by overwriting it with another image of the same file name.



FUTURE WORK
- place page in iframe
- enable CORS (BPB)
- host page on a separate server
- make new images (Jade)

----------------- SCHOOLGEN MAP ----------------------


The map comes with 3 css files:
- normalize.css and skeleton.css are both base styles that are applied to the page
- custom.css is an editable stylesheet. Some key styles are in the annotations for the stylesheet.

HTML - index.html
- Change the text inside the <span class="tooltiptext"> elements to change
 what pops up for that tooltip.
- It might be worth learning a small bit of CSS so you can add to the <style> tag of the html file.
 This way you can change e.g. the color of the <h4> tag saying 'Schoolgen Top 10'.

SCRIPT FILE - mapdash.js

Colors
- The colors for the map are in the array called 'colors'. I generated this using a tool
 called chroma.js - https://gka.github.io/palettes/
- There are 100 steps for the color.

DATA - directiontiltlist.csv
- The data is currently in a csv file.
- This is taken from the google spreadsheet you're currently keeping
 (using File > Download As... > Comma Separated Values )


FUTURE CHANGES
- Automating data retrieval
- Tilt/direction presentation
- Put this into an iframe, host on a separate server